/* Auto-generated by genmsg_cpp for file /home/annal/src/Pr2Debridement/srv/ReturnJointStates.srv */
#ifndef PR2DEBRIDEMENT_SERVICE_RETURNJOINTSTATES_H
#define PR2DEBRIDEMENT_SERVICE_RETURNJOINTSTATES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Pr2Debridement
{
template <class ContainerAllocator>
struct ReturnJointStatesRequest_ {
  typedef ReturnJointStatesRequest_<ContainerAllocator> Type;

  ReturnJointStatesRequest_()
  : name()
  {
  }

  ReturnJointStatesRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;


  typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReturnJointStatesRequest
typedef  ::Pr2Debridement::ReturnJointStatesRequest_<std::allocator<void> > ReturnJointStatesRequest;

typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesRequest> ReturnJointStatesRequestPtr;
typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesRequest const> ReturnJointStatesRequestConstPtr;


template <class ContainerAllocator>
struct ReturnJointStatesResponse_ {
  typedef ReturnJointStatesResponse_<ContainerAllocator> Type;

  ReturnJointStatesResponse_()
  : found()
  , position()
  , velocity()
  , effort()
  {
  }

  ReturnJointStatesResponse_(const ContainerAllocator& _alloc)
  : found(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , effort(_alloc)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _found_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  found;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  position;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  velocity;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  effort;


  typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReturnJointStatesResponse
typedef  ::Pr2Debridement::ReturnJointStatesResponse_<std::allocator<void> > ReturnJointStatesResponse;

typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesResponse> ReturnJointStatesResponsePtr;
typedef boost::shared_ptr< ::Pr2Debridement::ReturnJointStatesResponse const> ReturnJointStatesResponseConstPtr;

struct ReturnJointStates
{

typedef ReturnJointStatesRequest Request;
typedef ReturnJointStatesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ReturnJointStates
} // namespace Pr2Debridement

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f2d21c30868b92dc41a0431bacd47b2";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f2d21c30868b92dULL;
  static const uint64_t static_value2 = 0xc41a0431bacd47b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Pr2Debridement/ReturnJointStatesRequest";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] name\n\
\n\
";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a36649f5b1439b638a41d18af93e9a4";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a36649f5b1439b6ULL;
  static const uint64_t static_value2 = 0x38a41d18af93e9a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Pr2Debridement/ReturnJointStatesResponse";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32[] found\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
";
  }

  static const char* value(const  ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReturnJointStatesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.found);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.effort);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReturnJointStatesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Pr2Debridement::ReturnJointStates> {
  static const char* value() 
  {
    return "ce9bd2b56c904b190a782a08482fb4e9";
  }

  static const char* value(const Pr2Debridement::ReturnJointStates&) { return value(); } 
};

template<>
struct DataType<Pr2Debridement::ReturnJointStates> {
  static const char* value() 
  {
    return "Pr2Debridement/ReturnJointStates";
  }

  static const char* value(const Pr2Debridement::ReturnJointStates&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce9bd2b56c904b190a782a08482fb4e9";
  }

  static const char* value(const Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Pr2Debridement/ReturnJointStates";
  }

  static const char* value(const Pr2Debridement::ReturnJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce9bd2b56c904b190a782a08482fb4e9";
  }

  static const char* value(const Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Pr2Debridement/ReturnJointStates";
  }

  static const char* value(const Pr2Debridement::ReturnJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PR2DEBRIDEMENT_SERVICE_RETURNJOINTSTATES_H

